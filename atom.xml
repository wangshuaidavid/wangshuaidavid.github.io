<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[之隅·王大卫]]></title>
  <subtitle><![CDATA[千里の道も一歩から]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://yoursite.com/"/>
  <updated>2015-05-18T01:32:29.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name><![CDATA[Wang Shuai]]></name>
    <email><![CDATA[wangshuai@yeah.net]]></email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[写清晰的 iOS 动画代码]]></title>
    <link href="http://yoursite.com/2015/05/18/cleanAnimationCode/"/>
    <id>http://yoursite.com/2015/05/18/cleanAnimationCode/</id>
    <published>2015-05-18T01:31:16.000Z</published>
    <updated>2015-05-18T01:32:29.000Z</updated>
    <content type="html"><![CDATA[<p>之前在逛 stackoverflow 的时候，发现了 <a href="http://ronnqvi.st/" target="_blank" rel="external"><strong>ronnqvi</strong> 的博客</a> 里面的一些内容看了一些，觉得很不错，尤其是在动画和绘图方面能把一些问题描述的很清楚，觉得利用平时时间翻译一些他比较有价值的文章还是挺好的。</p>
<p>翻译讲究个<strong>信达雅</strong>，我不打算一行行规规矩矩的翻译，比较麻烦。想用类似读书笔记的方式翻译，想多说的就多说点<br>想skip掉就skip掉，把觉得重要的东西说到了就好。</p>
<p>这篇文章介绍了 iOS 动画代码的一些问题，在写 ios 动画代码的时候，经常会代码比较长，而且不太好组织。这里 <strong>ronnqvi</strong> 介绍了一些他的经验，可以参考。</p>
<p>比较好的内容就是可以更好的理解一下 <strong>CABasic Animation</strong> 和 <strong>Keyframe Animation</strong> 的使用，尤其是<br>刚接触 <strong>Core Animation</strong> 的同志，多多少少会有些搞不清楚。</p>
<h2 id="写清晰的_iOS_动画代码">写清晰的 iOS 动画代码</h2><p>好的代码应该是简洁(Clear)，可读性强，如何做到呢？</p>
<p>建议可以参考遵行一些 <strong>最佳实践</strong> 之类的东西，但是要明白一件事情，如果遵循它的原因只是因为有个人这样说所以就这样做，具体原因并不是很明白，那就很被动了。因为技术一天一个样子，变化很多，今天的 API 和最佳实践，过段时间可能就过时了，而自己没有明白最佳实践为何这样规定，就盲目的遵循，这样编码就会成为一种很机械的工作。</p>
<p>总之，代码应该是：干净，精炼，可读性强的。如果自己做不到这样的要求，那就找个比你做的好的的，参考他的做法，作为实践的指导，这是参考 <strong>最佳实践</strong> 的原因；搞清楚它的内容中是要求。<br><a id="more"></a><br>作为一个软件开发工作者，如何写出简洁和可读性强的代码是非常难解决的。因为这需要一个好的程序结构、耦合低的代码、一个对象只具有一个职责等这些比较高要求的开发能力。但是本文要说的不是这些，而是想介绍一些写代码的细节，用于写一些可读性强，能准确表达核心功能的代码。</p>
<h3 id="不要没事就使用功能很强的_API，去完成一个很简单的功能">不要没事就使用功能很强的 API，去完成一个很简单的功能</h3><p>实现一个功能可以有很多的方法。封装在高层的 API 是调用底层 API 来实现的，他们使用起来更直观方便，把很多底层 API 的细节给屏蔽了，所以写出来的代码也比较直观。</p>
<p>但是不是说你不能使用底层 API，有时候恰恰相反，但是要明白，如果要使用底层 API 到底是为什么要跳过<br>简单方便的而非要用它，给个合理的理由来。</p>
<p>比如在 iOS 动画的代码里面 <strong>UIVIew</strong> 提供的 animation 功能是在 Core Animation 的功能上实现的，使用 <strong>UIView</strong> 提供的动画 API 可以很方便的实现针对 View 的动画和底层 CAlayer 的 Animatable<br>perperty 的动画，方便的很。比如：</p>
<figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="collection">[UIView animateWithDuration:0.5</span><br><span class="line">                 animations:<span class="comment">^&#123;</span><br><span class="line">                     myView.center = newPosition;</span><br><span class="line">                 &#125;</span>]</span><span class="comment">;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CABasicAnimation *move =</span><br><span class="line">   [CABasicAnimation <span class="string">animationWithKeyPath:</span>@<span class="string">"position"</span>];</span><br><span class="line">move.duration = <span class="number">0.5</span>;</span><br><span class="line">move.fromValue = [NSValue <span class="string">valueWithCGPoint:</span>myView.center];</span><br><span class="line"></span><br><span class="line">myView.center = newPosition;</span><br><span class="line">[myView.layer <span class="string">addAnimation:</span>move <span class="string">forKey:</span>@<span class="string">"move my view"</span>];</span><br></pre></td></tr></table></figure>
<p>这两个代码块比较一下，当我看到代码时候，我不考虑 API 自身的复杂性和这个功能的代码块有几行代码，用代码行的长度来衡量是不是好代码，这个挺傻的。我关心的是，这个代码预期要给我表达的东西和它本身到底表达的怎么样，也就是有没有很到位的表示清楚它想要表达的。</p>
<p>当我读第一块代码的时候，我一下就能知道这个是一个动画代码块，而且使用的是 UIView 的 Animation 我就多多少少知道这个 API 本身的能力和具体的动画执行代码是在这个 Block 块里面定义，而且代码也就是对一个或者多个 View 中和显示相关的属性值的修改，然后数值反应在动画上。</p>
<p>当我读第二块代码的时候，一看就可以知道是针对位置的 CABasicAnimation，就能判断到之后的代码就是针对这个做的一些更复杂的限定，比如会有个相关的动画在后面，或者限定动画的执行时间之类的一些细节做的一些工作，但是我会想，为什么用它而不用 UIView 的 animation，是因为使用到了 UIView API 做不到的功能么？反正肯定是有原因，否则应该不会使用它。</p>
<p>同样在对比 Basic Animation 和 Keyframe Animation 时，同样都是 Core Animation 的子类，但是 Keyframe Animation 功能要强的多，我会理解 Keyframe Animation 会做所有 Basic Animation 能做的。那如果发现代码中使用到了 Keyframe Animation 那肯定是有相对坚实的理由选择它。</p>
<ul>
<li><strong>Basic Animation 是用来对 Layer 的一个 property 从一个值变成另一个值来使用的动画工具；</strong></li>
<li><strong>Keyframe Animation 是用来对 Layer 的一个 property 多个数值之间变换使用的动画工具。</strong></li>
</ul>
<p>所以选择后者应该是使用了 Basic Animation 做不到的功能。</p>
<p>比如下面的 3D 旋转的动画代码：</p>
<figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CABasicAnimation *<span class="built_in">rotate</span> =</span><br><span class="line">  [CABasicAnimation animationWithKeyPath:@<span class="string">"transform.rotation.y"</span>];</span><br><span class="line"><span class="built_in">rotate</span>.fromValue = @<span class="number">0</span>;</span><br><span class="line"><span class="built_in">rotate</span>.toValue   = @(M_PI);</span><br><span class="line"><span class="built_in">rotate</span>.duration  = <span class="number">1.5</span>;</span><br><span class="line">[myLayer addAnimation:<span class="built_in">rotate</span> forKey:@<span class="string">"rotate around Y"</span>];</span><br></pre></td></tr></table></figure>
<figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CAKeyframeAnimation *<span class="built_in">rotate</span> =</span><br><span class="line">  [CAKeyframeAnimation animationWithKeyPath:@<span class="string">"transform.rotation.y"</span>];</span><br><span class="line"><span class="built_in">rotate</span>.values   = @[@<span class="number">0</span>, @(M_PI)];</span><br><span class="line"><span class="built_in">rotate</span>.keyTimes = @[@<span class="number">0</span>, @<span class="number">1</span>];</span><br><span class="line"><span class="built_in">rotate</span>.duration = <span class="number">1.5</span>;</span><br><span class="line">[myLayer addAnimation:<span class="built_in">rotate</span> forKey:@<span class="string">"rotate around Y"</span>];</span><br></pre></td></tr></table></figure>
<p>当读到第一块的第一行的时候就知道，这个是使用 Basic Animation 并且用到了 Key-Path<br><a href="https://developer.apple.com/library/ios/documentation/Cocoa/Conceptual/CoreAnimation_guide/Key-ValueCodingExtensions/Key-ValueCodingExtensions.html#//apple_ref/doc/uid/TP40004514-CH12-SW2 (Core Animation: Key-Value Coding Extensions" target="_blank" rel="external">the Core Animation extensions</a> 指定了属性的动画。这一行可以充分说明2点：</p>
<ol>
<li>UIView 的动画实现不了这个功能，所以不使用 UIView 的动画；</li>
<li>并且因为是 Basic Animation 所以功能就是从一个数值变为另外一个。</li>
</ol>
<p>但是第二块第一行，使用 Keyframe Animation 没有上述的第二个信息，我们需要继续往下读，才能确定它是变为一个数值，还是中间要变多个数值。所以如果以 <strong>代码能暗示的和第一眼看来给你的信息和它真正要做的是否匹配</strong>，<br>这个作为一个衡量来看的话，明显第二块代码的描述是不够简洁的。</p>
<p>在新的 iOS7 中加入了 UIView keyframe animations， 在 UIView 动画这层加入了对 Keyframe animation<br>的动画支持，如果你问我这个什么时候使用和它的一些 best practice 之类的问题，我的回答是。我不知道。所以我很少使用它，并不是说你不能用，而是说它在我的代码工具包里面吧， 是被 skip 掉的。当我看到使用了 UIView 的 Keyframe animations，我搞不明白这个代码期望的是什么，其实就是说，它不能很好的提供一个使用的理由，本身也不是很简洁，无法直观的表达代码的功能。（译者：UIView keyframe animation 用一下发现还是挺好用的，如果在 UIKit 层，使用它还是很方便的）</p>
<p>使用同样的道理说明一下这个例子，你可以使用一个嵌套动画块来实现对一个属性多次数值的改变。比如下面的例子，把 background 颜色从红变到绿然后到蓝：</p>
<figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="collection">[UIView animateWithDuration:0.3 animations:<span class="comment">^&#123;</span><br><span class="line">    myView.backgroundColor = [UIColor redColor];</span><br><span class="line">&#125;</span> completion:^<span class="list">(<span class="keyword">BOOL</span> finished)</span> <span class="collection">&#123;</span><br><span class="line">    <span class="collection">[UIView animateWithDuration:0.3 animations:<span class="comment">^&#123;</span><br><span class="line">        myView.backgroundColor = [UIColor blueColor];</span><br><span class="line">    &#125;</span> completion:^<span class="list">(<span class="keyword">BOOL</span> finished)</span> <span class="collection">&#123;</span><br><span class="line">        <span class="collection">[UIView animateWithDuration:0.3 animations:<span class="comment">^&#123;</span><br><span class="line">            myView.backgroundColor = [UIColor greenColor];</span><br><span class="line">        &#125;</span>]</span><span class="comment">;</span></span><br><span class="line">    &#125;</span>]</span><span class="comment">;</span></span><br><span class="line">&#125;</span>]</span><span class="comment">;</span></span><br></pre></td></tr></table></figure>
<p>这样的代码我只关心的是，这个代码很难直接的告诉我，这些动画执行<strong>需要多长时间</strong>，我需要看进去每一个 block 然后计算一下；还有就是我需要看一看每一个 block 是不是真的只是修改一个 View 的 background color，看似很像，区别却很大：</p>
<figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="collection">[UIView animateWithDuration:.3 animations:<span class="comment">^&#123;</span><br><span class="line">    myView.backgroundColor = [UIColor redColor];</span><br><span class="line">&#125;</span> completion:^<span class="list">(<span class="keyword">BOOL</span> finished)</span> <span class="collection">&#123;</span><br><span class="line">    <span class="collection">[UIView animateWithDuration:.3 animations:<span class="comment">^&#123;</span><br><span class="line">        // another view is changing</span><br><span class="line">        otherView.backgroundColor = [UIColor blueColor];</span><br><span class="line">    &#125;</span> completion:^<span class="list">(<span class="keyword">BOOL</span> finished)</span> <span class="collection">&#123;</span><br><span class="line">        <span class="collection">[UIView animateWithDuration:.3 animations:<span class="comment">^&#123;</span><br><span class="line">            // another property is changing</span><br><span class="line">            myView.alpha = 0.0;</span><br><span class="line">        &#125;</span>]</span><span class="comment">;</span></span><br><span class="line">    &#125;</span>]</span><span class="comment">;</span></span><br><span class="line">&#125;</span>]</span><span class="comment">;</span></span><br></pre></td></tr></table></figure>
<p>但是如果使用 keyframe animation 的话，代码就非常简洁直观，以下的代码一下就能确定只是对一个 view 的background<br>color 的改变，并且能一眼就看到动画持续的时间：</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">CAKeyframeAnimation</span> *changeColor =</span><br><span class="line">  [<span class="built_in">CAKeyframeAnimation</span> animationWithKeyPath:<span class="string">@"backgroundColor"</span>];</span><br><span class="line">changeColor<span class="variable">.values</span> = @[(<span class="keyword">id</span>)[<span class="built_in">UIColor</span> redColor]<span class="variable">.CGColor</span>,</span><br><span class="line">                       (<span class="keyword">id</span>)[<span class="built_in">UIColor</span> greenColor]<span class="variable">.CGColor</span>,</span><br><span class="line">                       (<span class="keyword">id</span>)[<span class="built_in">UIColor</span> blueColor]<span class="variable">.CGColor</span>];</span><br><span class="line">changeColor<span class="variable">.duration</span> = <span class="number">0.9</span>;</span><br><span class="line"><span class="comment">// If it should keep the last value after the animation</span></span><br><span class="line">myView<span class="variable">.backgroundColor</span> = [<span class="built_in">UIColor</span> blueColor];</span><br><span class="line"></span><br><span class="line">[myView<span class="variable">.layer</span> addAnimation:changeColor forKey:<span class="string">@""</span>];</span><br></pre></td></tr></table></figure>
<h3 id="尽力追求精确">尽力追求精确</h3><p>Core Animation 加入了 <strong>Key-Value Coding Addtions</strong>，可以使用 key-value 的方式指定需要动画的属性，这个是很便利的方法，可以大大简化你 animation 的代码，不仅清晰而且不用敲很多重复代码。当你想要针对 <strong>opacity</strong> 来实现动画的时候，其实也是暗示了我没有使用 <strong>backgroundcolor</strong>、<strong>cornerRadius</strong>、<strong>transform</strong>、<strong>position</strong> 等。我们写代码的时候总是会想哪些 key path 没有执行动画，除非指定的 path 非常的精准，比如想变换 view 的位置可以指定 <strong>position</strong> 来实现，更好的做法是这样做，<strong>position.y</strong>，这样的指定很清晰明白，你不需要建立一个 <strong>transform</strong> 对象来实现坐标转换，直接指定到那一个值，然后赋值就可以完成动画，不仅清晰明白，而且不用考虑那些动画不需要 path，可以很好的聚焦问题，所以建议多参考<a href="https://developer.apple.com/library/ios/documentation/Cocoa/Conceptual/CoreAnimation_guide/Key-ValueCodingExtensions/Key-ValueCodingExtensions.html#//apple_ref/doc/uid/TP40004514-CH12-SW2 (Core Animation: Key-Value Coding Extensions" target="_blank" rel="external">这个文章</a>。</p>
<h3 id="使用_Group_来避免写重复的代码">使用 Group 来避免写重复的代码</h3><p><strong>Don’t repeat yourself （DRY）</strong>，一个很基本的编程规则，同样的代码，或者同样功能的代码最好不要在一个文件出现多次。如果需要对多个属性进行动画，那就需要使用 <strong>Group</strong> 来避免过多的重复逻辑的代码。把一些通用的配置写在 <strong>group</strong> 中，组织针对多个属性的多个动画，是很好的实践：</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">CABasicAnimation</span> *fade =</span><br><span class="line">  [<span class="built_in">CABasicAnimation</span> animationWithKeyPath:<span class="string">@"opacity"</span>];</span><br><span class="line">fade<span class="variable">.toValue</span> = @<span class="number">0.0</span>;</span><br><span class="line"><span class="comment">// the rest of the configuration comes from the group</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">CABasicAnimation</span> *flip =</span><br><span class="line">  [<span class="built_in">CABasicAnimation</span> animationWithKeyPath:<span class="string">@"transform.rotation.y"</span>];</span><br><span class="line">flip<span class="variable">.toValue</span> = @(M_PI_2);</span><br><span class="line"><span class="comment">// the rest of the configuration comes from the group</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">CAAnimationGroup</span> *fadeAndFlip = [<span class="built_in">CAAnimationGroup</span> animation];</span><br><span class="line">fadeAndFlip<span class="variable">.animations</span> = @[fade, flip];</span><br><span class="line">fadeAndFlip<span class="variable">.duration</span> = <span class="number">1.0</span>;</span><br><span class="line">fadeAndFlip<span class="variable">.timingFunction</span> =</span><br><span class="line">  [<span class="built_in">CAMediaTimingFunction</span> functionWithName:k<span class="built_in">CAMediaTimingFunctionEaseIn</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// Only because the view is disappearing (see next topic)</span></span><br><span class="line">fadeAndFlip<span class="variable">.fillMode</span> = k<span class="built_in">CAFillModeForwards</span>;</span><br><span class="line">fadeAndFlip<span class="variable">.removedOnCompletion</span> = <span class="literal">NO</span>;</span><br><span class="line">fadeAndFlip<span class="variable">.delegate</span> = <span class="keyword">self</span>;</span><br><span class="line"></span><br><span class="line">[myView<span class="variable">.layer</span> addAnimation:fadeAndFlip</span><br><span class="line">                    forKey:<span class="string">@"fade out and flip over"</span>];</span><br></pre></td></tr></table></figure>
<h3 id="如果一些动画只是用来装饰_UI_的，那么就显示的定义它，不要用_implicit_Animation">如果一些动画只是用来装饰 UI 的，那么就显示的定义它，不要用 implicit Animation</h3><p>在使用 Core Animation 的时候，有些经验的知道使用 <strong>removedOnComplition ＝ NO</strong> 来避免动画运行完毕后，view 跳回到初试状态。<a href="http://ronnqvi.st/multiple-animations/" target="_blank" rel="external">（作者在之前的一篇文章中做了很好的解释）</a> 需要说明的是，当对一个 CALayer 的属性做动画的时候，这个 CALayer 对象的实际值并没有改变，如果打印一下 log 就能看到，在动画执行期间还是之后，对象实际的数值没有改变。</p>
<p>这是因为动画执行时，会根据对象实际的值，生成一个展示数值 <strong>presentation Value</strong>，用于给屏幕展示。在苹果官方文档中提到过</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">The data <span class="keyword">and</span> state information <span class="keyword">of</span> a layer object <span class="keyword">is</span> decoupled <span class="keyword">from</span> <span class="keyword">the</span></span><br><span class="line">visual presentation <span class="keyword">of</span> <span class="keyword">that</span> layer’s content onscreen.</span><br></pre></td></tr></table></figure>
<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Objects <span class="operator">in</span> <span class="operator">the</span> presentation tree contain <span class="operator">the</span> <span class="operator">in</span>-flight values <span class="keyword">for</span> <span class="keyword">any</span></span><br><span class="line">running animations.</span><br></pre></td></tr></table></figure>
<p>就是对象的实际值和屏幕显示的数值不一定一致（译者我：在 iOS 的 view 显示中，有两套系统，其中一个是 render tree 的是用于展示图像和动画的，和实际的 model tree 是 duplicate 的两个系统，这些对理解动画很有帮助。）</p>
<p>当一个动画结束后，它会被自动的从 layer 中移除掉，然后屏幕显示它 model 中的数值，也就是动画结束后会跳回初始状态的原因，避免这个有两个种方法：</p>
<ol>
<li>指定动画的 <strong>removedOnCompletion ＝ NO</strong> 和 <strong>fillMode ＝ kCAFillModeForwards</strong>；这样动画结束后不会被移除；</li>
<li>在<strong>动画开始前</strong>，设定 model 的数值，等于动画后的数值；</li>
</ol>
<p>第一种方法，苹果在 2007年 WWDC 的 session 上说过，不过问题是：这种方法会有一个很严重的问题：屏幕显示的属性数值和程序中实际 model 是数值不一致，这会导致很多奇奇怪怪的问题。作者列举了一下。</p>
<p>第二种方法是被推荐的，因为它能保持实际数值和先是数值的同步，保证代码中和你看到的数值是一致的，这样可以避免很多麻烦，<br>如果需要一个连续变化，装饰性的动画，那么 Model 的数值应该被设置成动画结束后的那个数值。中间数值就在 presentation tree 上让它为了演示临时存在一下就可以。这也算是一种最佳的实践吧。</p>
<p>在使用第二种方法的时候，可能会遇到一些奇怪的问题，展示的可能和你想的不一样，<a href="http://ronnqvi.st/multiple-animations/" target="_blank" rel="external">可以看看这里</a>。这里只要记住在动画开始前，设置 model 的数值，就不会有问题。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>之前在逛 stackoverflow 的时候，发现了 <a href="http://ronnqvi.st/"><strong>ronnqvi</strong> 的博客</a> 里面的一些内容看了一些，觉得很不错，尤其是在动画和绘图方面能把一些问题描述的很清楚，觉得利用平时时间翻译一些他比较有价值的文章还是挺好的。</p>
<p>翻译讲究个<strong>信达雅</strong>，我不打算一行行规规矩矩的翻译，比较麻烦。想用类似读书笔记的方式翻译，想多说的就多说点<br>想skip掉就skip掉，把觉得重要的东西说到了就好。</p>
<p>这篇文章介绍了 iOS 动画代码的一些问题，在写 ios 动画代码的时候，经常会代码比较长，而且不太好组织。这里 <strong>ronnqvi</strong> 介绍了一些他的经验，可以参考。</p>
<p>比较好的内容就是可以更好的理解一下 <strong>CABasic Animation</strong> 和 <strong>Keyframe Animation</strong> 的使用，尤其是<br>刚接触 <strong>Core Animation</strong> 的同志，多多少少会有些搞不清楚。</p>
<h2 id="写清晰的_iOS_动画代码">写清晰的 iOS 动画代码</h2><p>好的代码应该是简洁(Clear)，可读性强，如何做到呢？</p>
<p>建议可以参考遵行一些 <strong>最佳实践</strong> 之类的东西，但是要明白一件事情，如果遵循它的原因只是因为有个人这样说所以就这样做，具体原因并不是很明白，那就很被动了。因为技术一天一个样子，变化很多，今天的 API 和最佳实践，过段时间可能就过时了，而自己没有明白最佳实践为何这样规定，就盲目的遵循，这样编码就会成为一种很机械的工作。</p>
<p>总之，代码应该是：干净，精炼，可读性强的。如果自己做不到这样的要求，那就找个比你做的好的的，参考他的做法，作为实践的指导，这是参考 <strong>最佳实践</strong> 的原因；搞清楚它的内容中是要求。<br>]]>
    
    </summary>
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
      <category term="Article" scheme="http://yoursite.com/categories/Article/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[关于 iOS Architecture]]></title>
    <link href="http://yoursite.com/2015/05/15/SomeThingAboutiOSArchitecture/"/>
    <id>http://yoursite.com/2015/05/15/SomeThingAboutiOSArchitecture/</id>
    <published>2015-05-14T22:09:55.000Z</published>
    <updated>2015-05-14T23:39:47.000Z</updated>
    <content type="html"><![CDATA[<p>iOS 的开发做了几年了，对于 iOS 项目的架构部分说说感受。<br>大家都熟悉的是，iOS 以及 Mac 桌面程序，苹果提供的项目架构 Pattern 是经典的 MVC 模式，它提供了很好的解耦结构，项目中不同层次的隔离也可以做的很清楚。但是做过几个项目后会发现，MVC 在一些模块和结构还不会很复杂的项目中，功能发挥的还不错，但是如果项目功能稍微过大，它就显得有些力量不足。<br><a id="more"></a><br>原因其实也很简单， MVC 直接的定义了，模型、视图、控制器的隔离，并规定了3个层次之间沟通的一些规则（以后会分析，建议看看斯坦福那套教程 MVC 的介绍那部分，也就10多分钟，没见过其它讲的更清楚的了），但是毕竟只是直接提到了3个大层次，如果项目中使用一个 Full-Life-Cycle 的 service 如何放置它，甚至一些 Utiliy 类，它们的 expose scope 有多大等，这些问题在 MVC 的架构中没有明显的层次划分，这都需要开发人员，仔细思考一下如何安排他们。总之，经常见到的就是一个代码量庞大的 ViewController 和夹杂了业务逻辑的 View。</p>
<p>看过很多 iOS 开发人员，用 ViewController 打天下的现象，使得 VC 中的代码又难度，结构又乱，毕竟界面控制和业务逻辑都在里面，于是写很多 <code>mask －</code> 把文件内的 code 分成一堆一堆，也没有什么改善。</p>
<p>对于如何编写一个轻量级的 View Controller 可以参考一下<a href="http://objccn.io/issue-1-1/" target="_blank" rel="external">这篇文章</a>的建议, 合理的分离，不仅让文件中代码清晰，而且代码可复用率增强以及测试的便利。</p>
<p>前段时间，peek 了一下许总的 <code>IBM Navigation</code> 项目结构，感觉结构很陌生， IBM 就爱搞这个，挺简单的东西他们一搞，基本上就。。。</p>
<p>这两天看了看 <a href="http://objccn.io/issue-13/" target="_blank" rel="external">objc中国-架构</a> 部分的文章，感觉项目中尝试一下 VIPER 还是挺好的，不过它涉及的对象比较多，规模不是很大的项目使用的时候应该适当的 trim 一下。至于 MVVM 和其它的方式，我觉得不是很好用，之前做 WPF 开发的时候到 MVVM 很多，觉得在 OC 项目中套入这个模式，能带来的简化效果不大，意义不一定很大。至于  ReactiveCocoa 还是建议使用一下， 有一定的 learning curve 但是，用起来后感觉还是挺不错的，而且对反应式编程了解一下挺好。</p>
<p>有个例子是 github 上的<a href="https://github.com/RuiAAPeres/iOSArchitecture" target="_blank" rel="external">这个项目</a>,它和 VIPER 相似的也就是有个简单的 Interactor 类，结构分的比较细，每个文件的 code 比较少，但是文件数目过多，一开始不太习惯，但是后来发觉还不错，比严格的 VIPER 好理解一些。</p>
<p>好一点的是 <a href="https://github.com/luisobo/clean-architecture" target="_blank" rel="external">Clean Architecture for iOS</a> 喜欢的是里面注册 Service 部分的 code 一定要拿来用用。</p>
<p>项目中 README 中的一段描述觉得挺好的，说了传统项目结构的问题，也说了如何组织结构的一些原则：</p>
<hr>
<h4 id="Goals_of_this_Project">Goals of this Project</h4><p>One of the main issues across the iOS development ecosystem is the lack of a well stablished architecture, from small to big applications.<br>There is also a huge gap of Repositories/Projects/Samples that show what an app should look like, from a architectural point of view. </p>
<p>You can see that when:</p>
<ul>
<li>You have Logic mixed with UI.</li>
<li>You cannot see the boundaries between the Controller and the Model (MVC)</li>
<li>Your <code>UIViewControllers</code> surpass 300 lines (From my experience when a <code>UIViewController</code> passes that frontier, normally something could be done better)</li>
<li>It’s not clear for you where things are and how to use them.</li>
</ul>
<p>Each project has it’s own demons, so what I want with this sample project, is a way for iOS developers to have a reference for what they should <strong>always</strong> try to achieve:</p>
<ul>
<li>Strive for small, simple, clean, <strong>understandable</strong> and maintainable classes.</li>
<li>Respect the <a href="http://www.codeproject.com/Articles/60845/The-S-O-L-I-D-Object-Oriented-Programming-OOP-Prin" target="_blank" rel="external">SOLID principles</a>.</li>
<li>Respect the DRY Principle.</li>
<li>Respect the 4 OOP principles: Encapsulation, Abstraction, Inheritance, Polymorphism.</li>
<li><strong>Create methods that do one thing and one thing only</strong> (this is specially useful for Unit Testing).</li>
<li>Create meaningful names for your methods, classes, variables, properties. <strong>This is one of the most underestimated part of coding.</strong></li>
</ul>
<hr>
<p>总之，当你在面对刚刚 new 好的项目，并且头绪万千无从下手的时候， 看看上面第二部分的建议，不管用的哪种<strong>项目结构指导</strong>只要用这些建议作为尺子量一下，好的项目就诞生了。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>iOS 的开发做了几年了，对于 iOS 项目的架构部分说说感受。<br>大家都熟悉的是，iOS 以及 Mac 桌面程序，苹果提供的项目架构 Pattern 是经典的 MVC 模式，它提供了很好的解耦结构，项目中不同层次的隔离也可以做的很清楚。但是做过几个项目后会发现，MVC 在一些模块和结构还不会很复杂的项目中，功能发挥的还不错，但是如果项目功能稍微过大，它就显得有些力量不足。<br>]]>
    
    </summary>
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
      <category term="Article" scheme="http://yoursite.com/categories/Article/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[For Ref - iOS Best Practice]]></title>
    <link href="http://yoursite.com/2015/05/13/bestPracticeiOS/"/>
    <id>http://yoursite.com/2015/05/13/bestPracticeiOS/</id>
    <published>2015-05-13T07:54:10.000Z</published>
    <updated>2015-05-14T07:12:12.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Why?">Why?</h2><p>Getting on board with iOS can be intimidating. Neither Swift nor Objective-C are widely used elsewhere, the platform has its own names for almost everything, and it’s a bumpy road for your code to actually make it onto a physical device. This living document is here to help you, whether you’re taking your first steps in Cocoaland or you’re curious about doing things “the right way”. Everything below is just suggestions, so if you have a good reason to do something differently, by all means go for it!</p>
<a id="more"></a>
<h2 id="Contents">Contents</h2><p>If you are looking for something specific, you can jump right into the relevant section from here.</p>
<ol>
<li><a href="#getting-started">Getting Started</a></li>
<li><a href="#common-libraries">Common Libraries</a></li>
<li><a href="#architecture">Architecture</a></li>
<li><a href="#networking">Networking</a></li>
<li><a href="#assets">Assets</a></li>
<li><a href="#coding-style">Coding Style</a></li>
<li><a href="#diagnostics">Diagnostics</a></li>
<li><a href="#analytics">Analytics</a></li>
<li><a href="#building">Building</a></li>
<li><a href="#deployment">Deployment</a></li>
<li><a href="#in-app-purchases-iap">In-App Purchases (IAP)</a></li>
<li><a href="#license">License</a></li>
</ol>
<h2 id="Getting_Started"><span id="getting-started">Getting Started</span></h2><h3 id="Xcode">Xcode</h3><p><a href="https://developer.apple.com/xcode/" target="_blank" rel="external">Xcode</a> is the IDE of choice for most iOS developers, and the only one officially supported by Apple. There are some alternatives, of which <a href="https://www.jetbrains.com/objc/" target="_blank" rel="external">AppCode</a> is arguably the most famous, but unless you’re already a seasoned iOS person, go with Xcode. Despite its shortcomings, it’s actually quite usable nowadays!</p>
<p>To install, simply download <a href="https://itunes.apple.com/us/app/xcode/id497799835" target="_blank" rel="external">Xcode on the Mac App Store</a>. It comes with the newest SDK and simulators, and you can install more stuff under <em>Preferences &gt; Downloads</em>.</p>
<h3 id="Project_Setup">Project Setup</h3><p>A common question when beginning an iOS project is whether to write all views in code or use Interface Builder with Storyboards or XIB files. Both are known to occasionally result in working software. However, there are a few considerations:</p>
<h4 id="Why_code?">Why code?</h4><ul>
<li>Storyboards are more prone to version conflicts due to their complex XML structure. This makes merging much harder than with code.</li>
<li>It’s easier to structure and reuse views in code, thereby keeping your codebase <a href="http://en.wikipedia.org/wiki/Don%27t_repeat_yourself" target="_blank" rel="external">DRY</a>.</li>
<li>All information is in one place. In Interface Builder you have to click through all the inspectors to find what you’re looking for.</li>
</ul>
<h4 id="Why_Storyboards?">Why Storyboards?</h4><ul>
<li>For the less technically inclined, Storyboards can be a great way to contribute to the project directly, e.g. by tweaking colors or layout constraints. However, this requires a working project setup and some time to learn the basics.</li>
<li>Iteration is often faster since you can preview certain changes without building the project.</li>
<li>In Xcode 6, custom fonts and UI elements are finally represented visually in Storyboards, giving you a much better idea of the final appearance while designing.</li>
<li>Starting with iOS 8, <a href="http://blog.futurice.com/adaptive-view-ios8" target="_blank" rel="external">Size Classes</a> allow you to design for different device types and screens without duplication.</li>
</ul>
<h3 id="Ignores">Ignores</h3><p>A good first step when putting a project under version control is to have a decent <code>.gitignore</code> file. That way, unwanted files (user settings, temporary files, etc.) will never even make it into your repository. Luckily, GitHub has us covered for both <a href="https://github.com/github/gitignore/blob/master/Objective-C.gitignore" target="_blank" rel="external">Objective-C</a> and <a href="https://github.com/github/gitignore/blob/master/Swift.gitignore" target="_blank" rel="external">Swift</a>.</p>
<h3 id="CocoaPods">CocoaPods</h3><p>If you’re planning on including external dependencies (e.g. third-party libraries) in your project, <a href="http://www.cocoapods.org" target="_blank" rel="external">CocoaPods</a> offers easy and fast integration. Install it like so:</p>
<p>sudo gem install cocoapods</p>
<p>To get started, move inside your iOS project folder and run</p>
<p>pod init</p>
<p>This creates a Podfile, which will hold all your dependencies in one place. After adding your dependencies to the Podfile, you run</p>
<p>pod install</p>
<p>to install the libraries and include them as part of a workspace which also holds your own project. It is generally <a href="https://www.dzombak.com/blog/2014/03/including-pods-in-source-control.html" target="_blank" rel="external">recommended to commit the installed dependencies to your own repo</a>, instead of relying on having each developer running <code>pod install</code> after a fresh checkout.</p>
<p>Note that from now on, you’ll need to open the <code>.xcworkspace</code> file instead of <code>.xcproject</code>, or your code will not compile. The command</p>
<p>pod update</p>
<p>will update all pods to the newest versions permitted by the Podfile. You can use a wealth of <a href="http://guides.cocoapods.org/syntax/podfile.html#pod" target="_blank" rel="external">operators</a> to specify your exact version requirements.</p>
<h3 id="Project_Structure">Project Structure</h3><p>To keep all those hundreds of source files ending up in the same directory, it’s a good idea to set up some folder structure depending on your architecture. For instance, you can use the following:</p>
<p>├─ Models<br>├─ Views<br>├─ Controllers<br>├─ Stores<br>├─ Helpers</p>
<p>First, create them as groups (little yellow “folders”) within the group with your project’s name in Xcode’s Project Navigator. Then, for each of the groups, link them to an actual directory in your project path by opening their File Inspector on the right, hitting the little gray folder icon, and creating a new subfolder with the name of the group in your project directory.</p>
<h4 id="Localization">Localization</h4><p>Keep all user strings in localization files right from the beginning. This is good not only for translations, but also for finding user-facing text quickly. You can add a launch argument to your build scheme to launch the app in a certain language, e.g.</p>
<p>-AppleLanguages (Finnish)</p>
<p>For more complex translations such as plural forms that depending on a number of items (e.g. “1 person” vs. “3 people”), you should use the <a href="https://developer.apple.com/library/prerelease/ios/documentation/MacOSX/Conceptual/BPInternational/StringsdictFileFormat/StringsdictFileFormat.html" target="_blank" rel="external"><code>.stringsdict</code> format</a> instead of a regular <code>localizable.strings</code> file. As soon as you’ve wrapped your head around the crazy syntax, you have a powerful tool that knows how to make plurals for “one”, some”, “few” and “many” items, as needed <a href="http://www.unicode.org/cldr/charts/latest/supplemental/language_plural_rules.html" target="_blank" rel="external">e.g. in Russian or Arabic</a>.</p>
<p>Find more information about localization in <a href="https://speakerdeck.com/hasseg/localization-practicum" target="_blank" rel="external">these presentation slides</a> from the February 2012 HelsinkiOS meetup. Most of the talk is still relevant in October 2014.</p>
<h4 id="Constants">Constants</h4><p>Keep app-wide constants in a <code>Constants.h</code> file that is included in the prefix header.</p>
<p>Instead of preprocessor macro definitions (via <code>#define</code>), use actual constants:</p>
<p>static CGFloat const XYZBrandingFontSizeSmall = 12.0f;<br>static NSString * const XYZAwesomenessDeliveredNotificationName = @”foo”;</p>
<p>Actual constants are type-safe, have more explicit scope (they’re not available in all imported/included files until undefined), cannot be redefined or undefined in later parts of the code, and are available in the debugger.</p>
<h3 id="Branching_Model">Branching Model</h3><p>Especially when distributing an app to the public (e.g. through the App Store), it’s a good idea to isolate releases to their own branch with proper tags. Also, feature work that involves a lot of commits should be done on its own branch. <a href="https://github.com/nvie/gitflow" target="_blank" rel="external"><code>git-flow</code></a> is a tool that helps you follow these conventions. It is simply a convenience wrapper around Git’s branching and tagging commands, but can help maintain a proper branching structure especially for teams. Do all development on feature branches (or on <code>develop</code> for smaller work), tag releases with the app version, and commit to master only via</p>
<p>git flow release finish <version></version></p>
<h2 id="Common_Libraries"><span id="common-libraries">Common Libraries</span></h2><p>Generally speaking, make it a conscious decision to add an external dependency to your project. Sure, this one neat library solves your problem now, but maybe later gets stuck in maintenance limbo, with the next OS version that breaks everything being just around the corner. Another scenario is that a feature only achievable with external libraries suddenly becomes part of the official APIs. In a well-designed codebase, switching out the implementation is a small effort that pays off quickly. Always consider solving the problem using Apple’s extensive (and mostly excellent) frameworks first!</p>
<p>Therefore this section has been deliberately kept rather short. The libraries featured here tend to reduce boilerplate code (e.g. Auto Layout) or solve complex problems that require extensive testing, such as date calculations. As you become more proficient with iOS, be sure to dive into the source here and there, and acquaint yourself with their underlying Apple frameworks. You’ll find that those alone can do a lot of the heavy lifting.</p>
<h3 id="AFNetworking">AFNetworking</h3><p>A perceived 99.95 percent of iOS developers use this network library. While <code>NSURLSession</code> is surprisingly powerful by itself, <a href="https://github.com/AFNetworking/AFNetworking" target="_blank" rel="external">AFNetworking</a> remains unbeaten when it comes to actually managing a queue of requests, which is pretty much a requirement in any modern app.</p>
<h3 id="DateTools">DateTools</h3><p>As a general rule, <a href="https://www.youtube.com/watch?v=-5wpm-gesOY" target="_blank" rel="external">don’t write your date calculations yourself</a>. Luckily, in <a href="https://github.com/MatthewYork/DateTools" target="_blank" rel="external">DateTools</a> you get an MIT-licensed, thoroughly tested library that covers pretty much all your calendary needs.</p>
<h3 id="Auto_Layout_Libraries">Auto Layout Libraries</h3><p>If you prefer to write your views in code, chances are you’ve met either of Apple’s awkward syntaxes – the regular ‘NSLayoutConstraint’ factory or the so-called <a href="https://developer.apple.com/library/ios/documentation/userexperience/conceptual/AutolayoutPG/VisualFormatLanguage/VisualFormatLanguage.html#//apple_ref/doc/uid/TP40010853-CH3-SW1" target="_blank" rel="external">Visual Format Language</a>. The former is extremely verbose and the latter based on strings, which effectively prevents compile-time checking.</p>
<p><a href="https://www.github.com/Masonry/Masonry" target="_blank" rel="external">Masonry</a> remedies this by introducing its own DSL to make, update and replace constraints. A similar approach for Swift is taken by <a href="https://github.com/robb/Cartography" target="_blank" rel="external">Cartography</a>, which builds on the language’s powerful operator overloading features. For the more conservative, <a href="https://github.com/floriankugler/FLKAutoLayout" target="_blank" rel="external">FLKAutoLayout</a> offers a clean, but rather non-magical wrapper around the native APIs.</p>
<h2 id="Architecture"><span id="architecture">Architecture</span></h2><ul>
<li><a href="http://programmers.stackexchange.com/questions/184396/mvcs-model-view-controller-store" target="_blank" rel="external">Model-View-Controller-Store (MVCS)</a></li>
<li>This is the default Apple architecture (MVC), extended by a Store layer that vends Model instances and handles the networking, caching etc.</li>
<li>Every Store exposes to the view controllers either <code>RACSignal</code>s or <code>void</code>-returning methods with custom completion blocks</li>
<li><a href="http://www.objc.io/issue-13/mvvm.html" target="_blank" rel="external">Model-View-ViewModel (MVVM)</a></li>
<li>Motivated by “massive view controllers”: MVVM considers <code>UIViewController</code> subclasses part of the View and keeps them slim by maintaining all state in the ViewModel</li>
<li>Quite new concept for Cocoa developers, but <a href="http://cocoasamurai.blogspot.de/2013/03/basic-mvvm-with-reactivecocoa.html" target="_blank" rel="external">gaining</a> <a href="http://www.raywenderlich.com/74106/mvvm-tutorial-with-reactivecocoa-part-1" target="_blank" rel="external">traction</a></li>
<li><a href="http://www.objc.io/issue-13/viper.html" target="_blank" rel="external">View-Interactor-Presenter-Entity-Routing (VIPER)</a></li>
<li>Rather exotic architecture that might be worth looking into in larger projects, where even MVVM feels too cluttered and testability is a major concern</li>
</ul>
<h3 id="“Event”_Patterns">“Event” Patterns</h3><p>These are the idiomatic ways for components to notify others about things:</p>
<ul>
<li><strong>Delegation:</strong> <em>(one-to-one)</em> Apple uses this a lot (some would say, too much). Use when you want to communicate stuff back e.g. from a modal view.</li>
<li><strong>Callback blocks:</strong> <em>(one-to-one)</em> Allow for a more loose coupling, while keeping related code sections close to each other. Also scales better than delegation when there are many senders.</li>
<li><strong>Notification Center:</strong> <em>(one-to-many)</em> Possibly the most common way for objects to emit “events” to multiple observers. Very loose coupling — notifications can even be observed globally without reference to the dispatching object.</li>
<li><strong>Key-Value Observing (KVO):</strong> <em>(one-to-many)</em> Does not require the observed object to explicitly “emit events” as long as it is <em>Key-Value Coding (KVC)</em> compliant for the observed keys (properties). Usually not recommended due to its implicit nature and the cumbersome standard library API.</li>
<li><strong>Signals:</strong> <em>(one-to-many)</em> The centerpiece of <a href="https://github.com/ReactiveCocoa/ReactiveCocoa" target="_blank" rel="external">ReactiveCocoa</a>, they allow chaining and combining to your heart’s content, thereby offering a way out of <a href="http://elm-lang.org/learn/Escape-from-Callback-Hell.elm" target="_blank" rel="external">callback hell</a>.</li>
</ul>
<h3 id="Models">Models</h3><p>Keep your models immutable, and use them to translate the remote API’s semantics and types to your app. Github’s <a href="https://github.com/Mantle/Mantle" target="_blank" rel="external">Mantle</a> is a good choice.</p>
<h3 id="Views">Views</h3><p>When laying out your views using Auto Layout, be sure to add the following to your class:</p>
<ul>
<li>(BOOL)requiresConstraintBasedLayout<br>{<br>return YES;<br>}</li>
</ul>
<p>Otherwise you may encounter strange bugs when the system doesn’t call <code>-updateConstraints</code> as you would expect it to.</p>
<h3 id="Controllers">Controllers</h3><p>Use dependency injection, i.e. pass any required objects in as parameters, instead of keeping all state around in singletons. The latter is okay only if the state <em>really</em> is global.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">+ [[FooDetailsViewController alloc] initWithFoo:(Foo *)foo];</span><br></pre></td></tr></table></figure>
<h2 id="Networking"><span id="networking">Networking</span></h2><h3 id="Traditional_way:_Use_custom_callback_blocks">Traditional way: Use custom callback blocks</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">// GigStore.h&#10;&#10;typedef void (^FetchGigsBlock)(NSArray *gigs, NSError *error);&#10;&#10;- (void)fetchGigsForArtist:(Artist *)artist completion:(FetchGigsBlock)completion&#10;&#10;&#10;// GigsViewController.m&#10;&#10;[[GigStore sharedStore] fetchGigsForArtist:artist completion:^(NSArray *gigs, NSError *error) &#123;&#10;if (!error) &#123;&#10;// Do something with gigs&#10;&#125;&#10;else &#123;&#10;// :(&#10;&#125;&#10;];</span><br></pre></td></tr></table></figure>
<p>This works, but can quickly lead to callback hell if you need to chain multiple requests.</p>
<h3 id="Reactive_way:_Use_RAC_signals">Reactive way: Use RAC signals</h3><p>If you find yourself in callback hell, have a look at <a href="https://github.com/ReactiveCocoa/ReactiveCocoa" target="_blank" rel="external">ReactiveCocoa (RAC)</a>. It’s a versatile and multi-purpose library that can change the way people write <a href="https://github.com/jspahrsummers/GroceryList" target="_blank" rel="external">entire apps</a>, but you can also use it sparingly where it fits the task.</p>
<p>There are good introductions to the concept of RAC (and FRP in general) on <a href="http://www.teehanlax.com/blog/getting-started-with-reactivecocoa/" target="_blank" rel="external">Teehan+Lax</a> and <a href="http://nshipster.com/reactivecocoa/" target="_blank" rel="external">NSHipster</a>.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">// GigStore.h&#10;&#10;- (RACSignal *)gigsForArtist:(Artist *)artist;&#10;&#10;&#10;// GigsViewController.m&#10;&#10;[[GigStore sharedStore] gigsForArtist:artist]&#10;subscribeNext:^(NSArray *gigs) &#123;&#10;// Do something with gigs&#10;&#125; error:^(NSError *error) &#123;&#10;// :(&#10;&#125;&#10;];</span><br></pre></td></tr></table></figure>
<p>This allows us to transform or filter gigs before showing them, by combining the gig signal with other signals.</p>
<h2 id="Assets"><span id="assets">Assets</span></h2><p><a href="https://developer.apple.com/library/ios/recipes/xcode_help-image_catalog-1.0/Recipe.html" target="_blank" rel="external">Asset catalogs</a> are the best way to manage all your project’s visual assets. They can hold both universal and device-specific (iPhone 4-inch, iPhone Retina, iPad, etc.) assets and will automatically serve the correct ones for a given name. Teaching your designer(s) how to add and commit things there (Xcode has its own built-in Git client) can save a lot of time that would otherwise be spent copying stuff from emails or other channels to the codebase. It also allows them to instantly try out their changes and iterate if needed.</p>
<h3 id="Using_Bitmap_Images">Using Bitmap Images</h3><p>Asset catalogs expose only the names of image sets, abstracting away the actual file names within the set. This nicely prevents asset name conflicts, as files such as <code>button_large@2x.png</code> are now namespaced inside their image sets. However, some discipline when naming assets can make life easier:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">IconCheckmarkHighlighted.png // Universal, non-Retina&#10;IconCheckmarkHighlighted@2x.png // Universal, Retina&#10;IconCheckmarkHighlighted~iphone.png // iPhone, non-Retina&#10;IconCheckmarkHighlighted@2x~iphone.png // iPhone, Retina&#10;IconCheckmarkHighlighted-568h@2x~iphone.png // iPhone, Retina, 4-inch&#10;IconCheckmarkHighlighted~ipad.png // iPad, non-Retina&#10;IconCheckmarkHighlighted@2x~ipad.png // iPad, Retina</span><br></pre></td></tr></table></figure>
<p>The modifiers <code>-568h</code>, <code>@2x</code>, <code>~iphone</code> and <code>~ipad</code> are not required per se, but having them in the file name when dragging the file to an image set will automatically place them in the right “slot”, thereby preventing assignment mistakes that can be hard to hunt down.</p>
<h3 id="Using_Vector_Images">Using Vector Images</h3><p>You can include the original <a href="http://martiancraft.com/blog/2014/09/vector-images-xcode6/" target="_blank" rel="external">vector graphics (PDFs)</a> produced by designers into the asset catalogs, and have Xcode automatically generate the bitmaps from that. This reduces the complexity of your project (the number of files to manage.)</p>
<h2 id="Coding_Style"><span id="coding-style">Coding Style</span></h2><h3 id="Naming">Naming</h3><p>Apple pays great attention to keeping naming consistent, if sometimes a bit verbose, throughout their APIs. When developing for Cocoa, you make it much easier for new people to join the project if you follow <a href="https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/CodingGuidelines/CodingGuidelines.html" target="_blank" rel="external">Apple’s naming conventions</a>.</p>
<p>Here are some basic takeaways you can start using right away:</p>
<p>A method beginning with a <em>verb</em> indicates that it performs some side effects, but won’t return anything:<br><code>- (void)loadView;</code><br><code>- (void)startAnimating;</code></p>
<p>Any method starting with a <em>noun</em>, however, returns that object and should do so without side effects:<br><code>- (UINavigationItem *)navigationItem;</code><br><code>+ (UILabel *)labelWithText:(NSString *)text;</code></p>
<p>It pays off to keep these two as separated as possible, i.e. not perform side effects when you transform data, and vice versa. That will keep your side effects contained to smaller sections of the code, which makes it more understandable and facilitates debugging.</p>
<h3 id="Structure">Structure</h3><p><a href="http://nshipster.com/pragma/" target="_blank" rel="external">Pragma marks</a> are a great way to group your methods, especially in view controllers. Here is a common structure that works with almost any view controller:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#10;#import &#34;SomeModel.h&#34;&#10;#import &#34;SomeView.h&#34;&#10;#import &#34;SomeController.h&#34;&#10;#import &#34;SomeStore.h&#34;&#10;#import &#34;SomeHelper.h&#34;&#10;#import &#60;SomeExternalLibrary/SomeExternalLibraryHeader.h&#62;&#10;&#10;static NSString * const XYZFooStringConstant = @&#34;FoobarConstant&#34;;&#10;static CGFloat const XYZFooFloatConstant = 1234.5;&#10;&#10;@interface XYZFooViewController () &#60;XYZBarDelegate&#62;&#10;&#10;@property (nonatomic, copy, readonly) Foo *foo;&#10;&#10;@end&#10;&#10;@implementation XYZFooViewController&#10;&#10;#pragma mark - Lifecycle&#10;&#10;- (instancetype)initWithFoo:(Foo *)foo;&#10;- (void)dealloc;&#10;&#10;#pragma mark - View Lifecycle&#10;&#10;- (void)viewDidLoad;&#10;- (void)viewWillAppear:(BOOL)animated;&#10;&#10;#pragma mark - Layout&#10;&#10;- (void)makeViewConstraints;&#10;&#10;#pragma mark - Public Interface&#10;&#10;- (void)startFooing;&#10;- (void)stopFooing;&#10;&#10;#pragma mark - User Interaction&#10;&#10;- (void)foobarButtonTapped;&#10;&#10;#pragma mark - XYZFoobarDelegate&#10;&#10;- (void)foobar:(Foobar *)foobar didSomethingWithFoo:(Foo *)foo;&#10;&#10;#pragma mark - Internal Helpers&#10;&#10;- (NSString *)displayNameForFoo:(Foo *)foo;&#10;&#10;@end</span><br></pre></td></tr></table></figure>
<p>The most important point is to keep these consistent across your project’s classes.</p>
<h3 id="External_Style_Guides">External Style Guides</h3><p>Futurice does not have company-level guidelines for coding style. It can however be useful to peruse the Objective-C style guides of other development shops, even if some bits can be quite company-specific or opinionated:</p>
<ul>
<li><a href="https://github.com/github/objective-c-style-guide" target="_blank" rel="external">GitHub</a></li>
<li><a href="http://google-styleguide.googlecode.com/svn/trunk/objcguide.xml" target="_blank" rel="external">Google</a></li>
<li><a href="https://github.com/NYTimes/objective-c-style-guide" target="_blank" rel="external">The New York Times</a></li>
<li><a href="https://github.com/raywenderlich/objective-c-style-guide" target="_blank" rel="external">Ray Wenderlich</a></li>
<li><a href="https://gist.github.com/soffes/812796" target="_blank" rel="external">Sam Soffes</a></li>
<li><a href="http://lukeredpath.co.uk/blog/2011/06/28/my-objective-c-style-guide/" target="_blank" rel="external">Luke Redpath</a></li>
</ul>
<h2 id="DiagnosticsDiagnostics"><span id="diagnostics">Diagnostics</span>Diagnostics</h2><h3 id="Compiler_warnings">Compiler warnings</h3><p>It is recommended that you enable as many compiler warnings as possible, and treat warnings as errors. This recommendation is justified in <a href="https://speakerdeck.com/hasseg/the-compiler-is-your-friend" target="_blank" rel="external">these presentation slides</a>. The slides also contain information on how to suppress certain warnings in specific files, or in specific sections of code.</p>
<p>In short, add at least these values to the <em>“Other Warning Flags”</em> build setting:</p>
<ul>
<li><code>-Wall</code> <em>(Enables lots of additional warnings)</em></li>
<li><code>-Wextra</code> <em>(Enables more additional warnings)</em></li>
</ul>
<p>Also enable the <em>“Treat warnings as errors”</em> build setting.</p>
<h3 id="Clang_Static_Analyzer">Clang Static Analyzer</h3><p>The Clang compiler (which Xcode uses) has a <em>static analyzer</em> that performs control and data flow analysis on your code and checks for lots of errors that the compiler cannot.</p>
<p>You can manually run the analyzer from the <em>Product → Analyze</em> menu item in Xcode.</p>
<p>The analyzer can work in either “shallow” or “deep” mode. The latter is much slower but may find more issues due to cross-function control and data flow analysis.</p>
<p>Recommendations:</p>
<ul>
<li>Enable <em>all</em> of the checks in the analyzer (by enabling all of the options in the “Static Analyzer” build setting sections)</li>
<li>Enable the <em>“Analyze during ‘Build’”</em> build setting for your release build configuration to have the analyzer run automatically during release builds. (Seriously, do this — you’re not going to remember to run it manually.)</li>
<li>Set the <em>“Mode of Analysis for ‘Analyze’”</em> build setting to <em>Shallow (faster)</em></li>
<li>Set the <em>“Mode of Analysis for ‘Build’”</em> build setting to <em>Deep</em></li>
</ul>
<h3 id="Faux_Pas"><a href="http://fauxpasapp.com/" target="_blank" rel="external">Faux Pas</a></h3><p>Created by our very own <a href="https://twitter.com/AliRantakari" target="_blank" rel="external">Ali Rantakari</a>, Faux Pas is a fabulous static error detection tool. It analyzes your codebase and finds issues you had no idea even existed. Be sure to run this before shipping any iOS (or Mac) app!</p>
<p><em>(Note: all Futurice employees get a free license to this — just ask Ali.)</em></p>
<h3 id="Debugging">Debugging</h3><p>When your app crashes, Xcode does not break into the debugger by default. To achieve this, add an exception breakpoint (click the “+” at the bottom of Xcode’s Debug Navigator) to halt execution whenever an exception is raised. In many cases, you will then see the line of code responsible for the exception. This catches any exception, even handled ones. If Xcode keeps breaking on benign exceptions in third party libraries e.g., you might be able to mitigate this by choosing <em>Edit Breakpoint</em> and setting the <em>Exception</em> drop-down to <em>Objective-C</em>.</p>
<p>For view debugging, <a href="http://revealapp.com/" target="_blank" rel="external">Reveal</a> and <a href="http://sparkinspector.com" target="_blank" rel="external">Spark Inspector</a> are two powerful visual inspectors that can save you hours of time, especially if you’re using Auto Layout and want to locate views that are collapsed or off-screen. Granted, Xcode offers <a href="https://developer.apple.com/library/ios/recipes/xcode_help-debugger/using_view_debugger/using_view_debugger.html" target="_blank" rel="external">something very similar</a> for free, but it’s iOS 8+ only and feels somewhat less polished.</p>
<h3 id="Profiling">Profiling</h3><p>Xcode comes with a profiling suite called Instruments. It contains a myriad of tools for profiling memory usage, CPU, network communications, graphics and much more. It’s a complex beast, but one of its more straight-forward use cases is tracking down memory leaks with the Allocations instrument. Simply choose <em>Product</em> &gt; <em>Profile</em> in Xcode, select the Allocations instrument, hit the Record button and filter the Allocation Summary on some useful string, like the prefix of your own app’s class names. The count in the Persistent column then tells you how many instances of each object you have. Any class for which the instance count increases indiscriminately indicates a memory leak.</p>
<p>Also good to know is that Instruments has an Automation tool for recording and playing back UI interactions as JavaScript files. <a href="https://github.com/jonathanpenn/ui-auto-monkey" target="_blank" rel="external">UI Auto Monkey</a> is a script that will use Automation to randomly pummel your app with taps, swipes and rotations which can be useful for stress/soak testing.</p>
<h2 id="Analytics"><span id="analytics">Analytics</span></h2><p>Including some analytics framework in your app is strongly recommended, as it allows you to gain insights on how people actually use it. Does feature X add value? Is button Y too hard to find? To answer these, you can send events, timings and other measurable information to a service that aggregates and visualizes them – for instance, <a href="http://www.google.com/tagmanager/" target="_blank" rel="external">Google Tag Manager</a>. The latter is more versatile than Google Analytics in that it inserts a data layer between app and Analytics, so that the data logic can be modified through a web service without having to update the app.</p>
<p>A good practice is to create a slim helper class, e.g. <code>XYZAnalyticsHelper</code>, that handles the translation from app-internal models and data formats (XYZModel, NSTimeInterval, …) to the mostly string-based data layer:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#10;- (void)pushAddItemEventWithItem:(XYZItem *)item editMode:(XYZEditMode)editMode&#10;&#123;&#10;NSString *editModeString = [self nameForEditMode:editMode];&#10;&#10;[self pushToDataLayer:@&#123;&#10;@&#34;event&#34;: &#34;addItem&#34;,&#10;@&#34;itemIdentifier&#34;: item.identifier,&#10;@&#34;editMode&#34;: editModeString&#10;&#125;];&#10;&#125;</span><br></pre></td></tr></table></figure>
<p>This has the additional advantage of allowing you to swap out the entire Analytics framework behind the scenes if needed, without the rest of the app noticing.</p>
<h3 id="Crash_Logs">Crash Logs</h3><p>First you should make your app send crash logs onto a server somewhere so that you can access them. You can implement this manually (using <a href="https://www.plcrashreporter.org" target="_blank" rel="external">PLCrashReporter</a> and your own backend) but it’s recommended that you use an existing service instead — for example one of the following:</p>
<ul>
<li><a href="http://www.crashlytics.com" target="_blank" rel="external">Crashlytics</a></li>
<li><a href="http://hockeyapp.net" target="_blank" rel="external">HockeyApp</a></li>
<li><a href="https://www.crittercism.com" target="_blank" rel="external">Crittercism</a></li>
<li><a href="https://mint.splunk.com" target="_blank" rel="external">Splunk MINTexpress</a></li>
</ul>
<p>Once you have this set up, ensure that you <em>save the Xcode archive (<code>.xcarchive</code>)</em> of every build you release. The archive contains the built app binary and the debug symbols (<code>dSYM</code>) which you will need to symbolicate crash reports from that particular version of your app.</p>
<h2 id="Building"><span id="building">Building</span></h2><h3 id="Build_Configurations">Build Configurations</h3><p>Even simple apps can be built in different ways. The most basic separation that Xcode gives you is that between <em>debug</em> and <em>release</em> builds. For the latter, there is a lot more optimization going on at compile time, at the expense of debugging possibilities. Apple suggests that you use the <em>debug</em> build configuration for development, and create your App Store packages using the <em>release</em> build configuration. This is codified in the default scheme (the dropdown next to the Play and Stop buttons in Xcode), which commands that <em>debug</em> be used for Run and <em>release</em> for Archive.</p>
<p>However, this is a bit too simple for real-world applications. You might – no, <a href="https://blog.futurice.com/five-environments-you-cannot-develop-without" target="_blank" rel="external"><em>should!</em></a> – have different environments for testing, staging and other activities related to your service. Each might have its own base URL, log level, bundle identifier (so you can install them side-by-side), provisioning profile and so on. Therefore a simple debug/release distinction won’t cut it. You can add more build configurations on the “Info” tab of your project settings in Xcode.</p>
<h4 id="xcconfig_files_for_build_settings"><code>xcconfig</code> files for build settings</h4><p>Typically build settings are specified in the Xcode GUI, but you can also use <em>configuration settings files</em> (“<code>.xcconfig</code> files”) for them. The benefits of using these are:</p>
<ul>
<li>You can add comments to explain things</li>
<li>You can <code>#include</code> other build settings files, which helps you avoid repeating yourself:</li>
<li>If you have some settings that apply to all build configurations, add a <code>Common.xcconfig</code> and <code>#include</code> it in all the other files</li>
<li>If you e.g. want to have a “Debug” build configuration that enables compiler optimizations, you can just <code>#include &quot;MyApp_Debug.xcconfig&quot;</code> and override one of the settings</li>
<li>Conflict resolution and merging becomes easier</li>
</ul>
<p>Find more information about this topic in <a href="https://speakerdeck.com/hasseg/xcode-configuration-files" target="_blank" rel="external">these presentation slides</a>.</p>
<h3 id="Targets">Targets</h3><p>A target resides conceptually below the project level, i.e. a project can have several targets that may override its project settings. Roughly, each target corresponds to “an app” within the context of your codebase. For instance, you could have country-specific apps (built from the same codebase) for different countries’ App Stores. Each of these will need development/staging/release builds, so it’s better to handle those through build configurations, not targets. It’s not uncommon at all for an app to only have a single target.</p>
<h3 id="Schemes">Schemes</h3><p>Schemes tell Xcode what should happen when you hit the Run, Test, Profile, Analyze or Archive action. Basically, they map each of these actions to a target and a build configuration. You can also pass launch arguments, such as the language the app should run in (handy for testing your localizations!) or set some diagnostic flags for debugging.</p>
<p>A suggested naming convention for schemes is <code>MyApp (&lt;Language&gt;) [Environment]</code>:</p>
<p>MyApp (English) [Development]<br>MyApp (German) [Development]<br>MyApp [Testing]<br>MyApp [Staging]<br>MyApp [App Store]</p>
<p>For most environments the language is not needed, as the app will probably be installed through other means than Xcode, e.g. TestFlight, and the launch argument thus be ignored anyway. In that case, the device language should be set manually to test localization.</p>
<h2 id="Deployment"><span id="deployment">Deployment</span></h2><p>Deploying software on iOS devices isn’t exactly straightforward. That being said, here are some central concepts that, once understood, will help you tremendously with it.</p>
<h3 id="Signing">Signing</h3><p>Whenever you want to run software on an actual device (as opposed to the simulator), you will need to sign your build with a <strong>certificate</strong> issued by Apple. Each certificate is linked to a private/public keypair, the private half of which resides in your Mac’s Keychain. There are two types of certificates:</p>
<ul>
<li><strong>Development certificate:</strong> Every developer on a team has their own, and it is generated upon request. Xcode might do this for you, but it’s better not to press the magic “Fix issue” button and understand what is actually going on. This certificate is needed to deploy development builds to devices.</li>
<li><strong>Distribution certificate:</strong> There can be several, but it’s best to keep it to one per organization, and share its associated key through some internal channel. This certificate is needed to ship to the App Store, or your organization’s internal “enterprise app store”.</li>
</ul>
<h3 id="Provisioning">Provisioning</h3><p>Besides certificates, there are also <strong>provisioning profiles</strong>, which are basically the missing link between devices and certificates. Again, there are two types to distinguish between development and distribution purposes:</p>
<ul>
<li><p><strong>Development provisioning profile:</strong> It contains a list of all devices that are authorized to install and run the software. It is also linked to one or more development certificates, one for each developer that is allowed to use the profile. The profile can be tied to a specific app or use a wildcard App ID (*). The latter is <a href="http://blog.jaredsinclair.com/post/116436789850/" target="_blank" rel="external">discouraged</a>, because Xcode is notoriously bad at picking the correct files for signing unless guided in the right direction. Also, certain capabilities like Push Notifications or App Groups require an explicit App ID.</p>
</li>
<li><p><strong>Distribution provisioning profile:</strong> There are three different ways of distribution, each for a different use case. Each distribution profile is linked to a distribution certificate, and will be invalid when the certificate expires.</p>
</li>
<li><strong>Ad-Hoc:</strong> Just like development profiles, it contains a whitelist of devices the app can be installed to. This type of profile can be used for beta testing on 100 devices per year. For a smoother experience and up to 1000 distinct users, you can use Apple’s newly acquired <a href="https://developer.apple.com/testflight/" target="_blank" rel="external">TestFlight</a> service. Supertop offers a good <a href="http://blog.supertop.co/post/108759935377/app-developer-friends-try-testflight" target="_blank" rel="external">summary of its advantages and issues</a>.</li>
<li><strong>App Store:</strong> This profile has no list of allowed devices, as anyone can install it through Apple’s official distribution channel. This profile is required for all App Store releases.</li>
<li><strong>Enterprise:</strong> Just like App Store, there is no device whitelist, and the app can be installed by anyone with access to the enterprise’s internal “app store”, which can be just a website with links. This profile is available only on Enterprise accounts.</li>
</ul>
<p>To sync all certificates and profiles to your machine, go to Accounts in Xcode’s Preferences, add your Apple ID if needed, and double-click your team name. There is a refresh button at the bottom, but sometimes you just need to restart Xcode to make everything show up.</p>
<h4 id="Debugging_Provisioning">Debugging Provisioning</h4><p>Sometimes you need to debug a provisioning issue. For instance, Xcode may refuse to install the build to an attached device, because the latter is not on the (development or ad-hoc) profile’s device list. In those cases, you can use Craig Hockenberry’s excellent <a href="https://github.com/chockenberry/Provisioning" target="_blank" rel="external">Provisioning</a> plugin by browsing to <code>~/Library/MobileDevice/Provisioning Profiles</code>, selecting a <code>.mobileprovision</code> file and hitting Space to launch Finder’s Quick Look feature. It will show you a wealth of information such as devices, entitlements, certificates, and the App ID.</p>
<h3 id="Uploading">Uploading</h3><p><a href="https://itunesconnect.apple.com" target="_blank" rel="external">iTunes Connect</a> is Apple’s portal for managing your apps on the App Store. To upload a build, Xcode 6 requires an Apple ID that is part of the developer account used for signing. This can make things tricky when you are part of several developer accounts and want to upload their apps, as for mysterious reasons <em>any given Apple ID can only be associated with a single iTunes Connect account</em>. One workaround is to create a new Apple ID for each iTunes Connect account you need to be part of, and use Application Loader instead of Xcode to upload the builds. That effectively decouples the building and signing process from the upload of the resulting <code>.app</code> file.</p>
<p>After uploading the build, be patient as it can take up to an hour for it to show up under the Builds section of your app version. When it appears, you can link it to the app version and submit your app for review.</p>
<h2 id="In-App_Purchases_(IAP)"><span id="in-app-purchases-iap">In-App Purchases (IAP)</span></h2><p>When validating in-app purchase receipts, remember to perform the following checks:</p>
<ul>
<li><strong>Authenticity:</strong> That the receipt comes from Apple</li>
<li><strong>Integrity:</strong> That the receipt has not been tampered with</li>
<li><strong>App match:</strong> That the app bundle ID in the receipt matches your app’s bundle identifier</li>
<li><strong>Product match:</strong> That the product ID in the receipt matches your expected product identifier</li>
<li><strong>Freshness:</strong> That you haven’t seen the same receipt ID before.</li>
</ul>
<p>Whenever possible, design your IAP system to store the content for sale server-side, and provide it to the client only in exchange for a valid receipt that passes all of the above checks. This kind of a design thwarts common piracy mechanisms, and — since the validation is performed on the server — allows you to use Apple’s HTTP receipt validation service instead of interpreting the receipt <code>PKCS #7</code> / <code>ASN.1</code> format yourself.</p>
<p>For more information on this topic, check out the <a href="http://futurice.com/blog/validating-in-app-purchases-in-your-ios-app" target="_blank" rel="external">Futurice blog: Validating in-app purchases in your iOS app</a>.</p>
<h2 id="License"><span id="license">License</span></h2><p><a href="http://www.futurice.com" target="_blank" rel="external">Futurice</a> • Creative Commons Attribution 4.0 International (CC BY 4.0)</p>
<h2 id="NetworkingMore_Ideas"><span id="networking">Networking</span>More Ideas</h2><ul>
<li>3x assets, iPhone 6 screen sizes explained</li>
<li>Add list of suggested compiler warnings</li>
<li>Ask IT about automated Jenkins build machine</li>
<li>Add section on Testing</li>
<li>Add “proven don’ts”</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Why?">Why?</h2><p>Getting on board with iOS can be intimidating. Neither Swift nor Objective-C are widely used elsewhere, the platform has its own names for almost everything, and it’s a bumpy road for your code to actually make it onto a physical device. This living document is here to help you, whether you’re taking your first steps in Cocoaland or you’re curious about doing things “the right way”. Everything below is just suggestions, so if you have a good reason to do something differently, by all means go for it!</p>]]>
    
    </summary>
    
      <category term="Ref" scheme="http://yoursite.com/tags/Ref/"/>
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
      <category term="Article" scheme="http://yoursite.com/categories/Article/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[关于开源 DLNA_iOS_Platinum ]]></title>
    <link href="http://yoursite.com/2015/05/09/AboutDLNAProject/"/>
    <id>http://yoursite.com/2015/05/09/AboutDLNAProject/</id>
    <published>2015-05-09T02:02:07.000Z</published>
    <updated>2015-05-09T05:57:50.000Z</updated>
    <content type="html"><![CDATA[<p>之前在 <a href="http://www.mobilogics.com.tw/" target="_blank" rel="external">Mobilogics</a> (非常好的公司 ^^) 公司工作的时候，为了给当时开发的一个硬体 <strong>TV Dongle</strong>（俗称电视棒儿）做了一个基于 <a href="http://baike.baidu.com/link?url=Iv4bsC2wSH6bqD0TbP2vqM2fmYayz_HRVzgZCGBtDMvvcIb8S5faoMcFtCbP8ZIobdbJuLHeiklVj6d7Ti3X7a" target="_blank" rel="external">DLNA</a> 的 DMS 媒体资源服务器。<br><a id="more"></a><br>名字是 <a href="https://itunes.apple.com/cy/app/imediapal/id556750019?mt=8" target="_blank" rel="external"><strong>iMediaPal</strong></a>，使用了赫赫有名的 <a href="http://www.plutinosoft.com/platinum/" target="_blank" rel="external"><strong>Platinum</strong></a> 这套 DLNA SDK，不过后来公司那里也一直没有提更新升级的需要，所以这个 APP release 了 1.0 版本后，就再也再也没有更新过…它还是基于 <strong>iOS 5.0</strong> 的。</p>
<p>后来也就是去年还是前年，在 <a href="http://www.cocoachina.com/" target="_blank" rel="external">cocoachina</a> 上发现有人 <a href="http://www.cocoachina.com/bbs/read.php?tid=264397&amp;page=1#1162229" target="_blank" rel="external">“跪求 iOS DLNA demo”</a> 于是就回复了他，后来就陆陆续续有人发邮件来要这个 APP 的 source code。后来觉得这样直接给人家不好，毕竟是给之前公司做的，算公司的 property， 我这么搞，估计小陈先生会睡不好觉。而且项目中大量使用了公司技术大神为公司专门封装的 SDK：无论 UI 的控件、基础工具，还是 Platinum SDK 全都封了进去，包山包海。 </p>
<p>没了这个 Mobilogics SDK，项目不光跑不起来，而且里面的代码也没啥看头。但是网上的同志们发来的邮件中流露出的都是那种迫切，焦急的感觉，大部分都是项目需要，毕竟也是过来人，那种被项目悲催，而且要使用陌生技术的无力感，顿时让我们彼此的心灵产生了极大的共鸣（-_-#）。</p>
<p>于是用业余时间，重新开了个项目，重新 build Platinum 的 SDK，复用之前的 code，改吧改吧，弄了一个完全基于开源包的 <a href="https://github.com/wangshuaidavid/DLNA_iOS_Platinum" target="_blank" rel="external"><strong>DLNA_iOS_Platinum</strong></a>。 发到了 github 上，然后回复了这些同志们，有几个还加了 qq ，保持了很好的沟通，感觉还不错，起了些作用。</p>
<p>他们有的项目的需求更进一步，还需要一个 <strong>DMC</strong> 的工具，加入对媒体的控制功能。这个我想等以后有时间，把这个项目做的内容丰富一些。之前给公司做的里面内置了 <strong>HTTP Server</strong> 并在手机端有一套相对完整的文件操作的实现，可以上传视频、图片然后给 DMP 播放。这些功能在这个开源的项目中就都砍了，没时间搞，想等以后有时间了就加入 WebDAV 啊，之类的功能，甚至加点 video trim 的东西，做的完整点然后放到 APP Store 上，不过，呵呵感觉还挺花时间的。</p>
<p>想说的是，之前在加入 <strong>Platinum</strong> 进入 iOS 项目中，总是有很多莫名其妙的错误，因为 <strong>Platinum</strong> 为了跨平台用 C++ 写的，而且还搞了 <strong>Neptune</strong> 的 <strong>C++ Runtime</strong>。 这代码基本上是 TMD 没法子看了。为了能在 iOS 中能顺利编译 C++， 不得不使用传说中的 <strong>Objective C++</strong>，这玩意在有一年的 WWDC 大会上 <em>(哪一年忘了应该是11年，讲 Compiler 优化的一集)</em> 苹果自己也说，这玩意就是一个 <strong>monster</strong>。也许是这份恐惧导致我总是没法正常的把 <strong>Platinum</strong> 加到项目中，后来才不得不让公司大牛都封装到了公司的 SDK 中为了让我不在做噩梦。</p>
<p>但是！这次新建这个项目的时候，MD 异常顺利， 一扫多年压在心头的，加入 Framework 不成功的心理阴霾。应该是之后的 XCode 做了优化，不用手动去配置一堆乱七八走的编译时参数，通过这件事情我还是挺感激生活的。我也参考了网上的<a href="http://www.cnblogs.com/zwj911112/p/4244223.html" target="_blank" rel="external">一篇文章</a>,他基本上吧流程说清楚了，不过加入后需要注意在所有的引用到和需要用到 <strong>Platinum C++ code</strong> 的文件中，所有 <strong>.m</strong> 的文件名需要改成 <strong>.mm</strong> 用来通知编译器，编译它的时候支持 C++ 的语法分析，否则会报告几十个 Error， 并且错误提示基本上看不出来为什么。</p>
<p>整个复写的结构也很直观，全部采用 Delegate 方式写，并且自己实现了3套 Delegate，分别可以吧</p>
<ol>
<li>本地 APP 目录结构中的媒体文件放出去；</li>
<li>手机 iTunes 中的歌曲和视频放出去；</li>
<li>手机照片中的照片和视频放出去；</li>
</ol>
<hr>
<p>项目的 github 地址是<a href="https://github.com/wangshuaidavid/DLNA_iOS_Platinum" target="_blank" rel="external">这里</a>, 附上了中英文说明，有4个人 Star 了它，我很高兴。希望能帮到更多的人。有需要的话会在 README 中多介绍下结构，没有就算了。觉得还有有时间多搞点功能好一点。</p>
<p>以后看时间情况，会陆续把之前写过的有些参考价值的代码，share 出来，以报无私的开源人士之开源之恩。我这个是，<strong>投我和田玉，我报小石子。</strong> ^_^</p>
<p>so， That’s all.  Have a nice day.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>之前在 <a href="http://www.mobilogics.com.tw/">Mobilogics</a> (非常好的公司 ^^) 公司工作的时候，为了给当时开发的一个硬体 <strong>TV Dongle</strong>（俗称电视棒儿）做了一个基于 <a href="http://baike.baidu.com/link?url=Iv4bsC2wSH6bqD0TbP2vqM2fmYayz_HRVzgZCGBtDMvvcIb8S5faoMcFtCbP8ZIobdbJuLHeiklVj6d7Ti3X7a">DLNA</a> 的 DMS 媒体资源服务器。<br>]]>
    
    </summary>
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
      <category term="Article" scheme="http://yoursite.com/categories/Article/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[第一篇 Hello World]]></title>
    <link href="http://yoursite.com/2015/05/03/firstpost/"/>
    <id>http://yoursite.com/2015/05/03/firstpost/</id>
    <published>2015-05-03T06:59:13.000Z</published>
    <updated>2015-05-09T03:11:31.000Z</updated>
    <content type="html"><![CDATA[<h3 id="开了个博客">开了个博客</h3><p>记录一些技术之类相关的东西，其他也记录。</p>
<hr>
<p>之前封闭让开发一些照片处理和拼接视频的Prototype，发现网上基本没有介绍如何将 iOS 的 Animation，转换成视频文件的内容，于是自己就搞了一个 persistent 的 utility，可以讲自己建立的 Core Animation 持久化输出到视频文件（m4a）的文件里。<br><a id="more"></a><br>使用比较熟悉的 <strong>AVFoundation</strong> 来做，效果还可以，不过感觉效率不是特别的理想，但是要做这样的优化势必要使用更低层的 Media manipulation 的库，而它们的复杂度和 AVFoundation 比…</p>
<p>使用的语言是 Swift，用的不多，但是感觉 Swift 非常好，它里面的编程范式我感觉就是之后程序开发语言的趋势，良好的函数式编程支持和 extension 扩展是我现阶段比较喜欢的，而且代码写起来的感觉很酷，有点侠客的意思，在语言的框架内提供了相当强的灵活性。个人觉得学个 Swift 语言很不错，如果和号称未来可以比肩 C 的 Go 语言，一起看一下会发现，两个挺像的，因为这样的 features 是计算机语言的未来 (<strong>@_@</strong>)。哪样的 features 呢？在 <a href="https://developer.apple.com/swift/" target="_blank" rel="external">Apple 的 introducing Swift</a> 里面提到</p>
<ul>
<li>Closures unified with function pointers</li>
<li>Tuples and multiple return values</li>
<li>Generics</li>
<li>Fast and concise iteration over a range or collection</li>
<li>Structs that support methods, extensions, protocols.</li>
<li>Functional programming patterns, e.g.: map and filter</li>
</ul>
<p>如果用一个单词形容一下 Swift，就是官网里面用到的那个 <strong>Modern</strong>。 不禁感叹这就是编程语言届最时尚的潮品啊。<strong>程序员潮不潮，不看装扮，看语言。</strong></p>
<hr>
<p>这个工具发布到了 <strong>Cocoapods</strong> 中，方便其它项目快速加入，加入 Cocoapods Spec 的过程还挺有意思，网上有篇教程是使用 pull request 来做的，但是后来 pods 改用相对灵活的 Trunk 方式来加入，整个过程简化了，全部用命令行就可以完成新的项目的添加，还是挺方便的，而且也不用像之前需要等待 pods 的工作人员来手动 merge 你的 pull request，可谓即提交即用，<strong>GOOD！</strong> 。因为改了新的提交方式，有意思的事情是，所有之前 pull request 的提交全部都 reject，而且这些 reject 的Spec，大部分我看都是中国人写的，估计和我一样都是参考网上那篇挺好的老教程做的吧 ：）。一篇比较新的介绍可以参考<a href="http://blog.wtlucky.com/blog/2015/02/26/create-private-podspec/" target="_blank" rel="external">这里</a>，免得 Cocoapods 的工作人员一次次的 reject 您老的每一次 pull request。</p>
<p>继续说这个工具，名字叫<a href="https://github.com/wangshuaidavid/WSDynamicAlbumMaker" target="_blank" rel="external">WSDynamicAlbumMaker</a>，并且已经有2个人star了（<strong>yeah！</strong> ^^!）。具体的使用方法可以看项目里的 <a href="https://github.com/wangshuaidavid/WSDynamicAlbumMaker/blob/master/README.md" target="_blank" rel="external">README.md</a>文件，我觉得写的还算能看懂。</p>
<p>其中里面还标配了一个 Demo ，功能是用户选择手机中相册的几张照片，然后使用 fade in/out 的方式把照片一个个显示一遍，类似一个简单的动态影集。例子中的功能不是重点，重点是吧 CAnimation 给搞到视频文件了。所有使用人只要专心用写 Core Animation 的动画，导入视频文件的工作，包括计算动画的开始时间之类的，可以用这个工具来做。还可以给视频加个背景音乐。</p>
<p>有需要的可以试一试。个人认为还行。</p>
<p>如果有任何建议，可以在 github 中加 issue，真是盼望能有几个 issue 过过瘾…</p>
<p><img src="http://i2.tietuku.com/5873e5b7a9a0f300.jpg" alt="掮客"></p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="开了个博客">开了个博客</h3><p>记录一些技术之类相关的东西，其他也记录。</p>
<hr>
<p>之前封闭让开发一些照片处理和拼接视频的Prototype，发现网上基本没有介绍如何将 iOS 的 Animation，转换成视频文件的内容，于是自己就搞了一个 persistent 的 utility，可以讲自己建立的 Core Animation 持久化输出到视频文件（m4a）的文件里。<br>]]>
    
    </summary>
    
      <category term="Misc" scheme="http://yoursite.com/tags/Misc/"/>
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
      <category term="Article" scheme="http://yoursite.com/categories/Article/"/>
    
  </entry>
  
</feed>